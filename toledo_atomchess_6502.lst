------- FILE toledo_atomchess_6502.asm LEVEL 1 PASS 2
      1  10000 ????						;
      2  10000 ????						; Toledo Atomchess 6502 for Atari VCS/2600
      3  10000 ????						;
      4  10000 ????						; by Ã“scar Toledo G. (nanochess)
      5  10000 ????						;
      6  10000 ????						; Creation date: Jan/02/2017. Ported from Toledo Atomchess x86.
      7  10000 ????						; Revision date: Jan/04/2017. Working board display logic and selection.
      8  10000 ????						; Revision date: Jan/05/2017. Avoid player to move non-white pieces or
      9  10000 ????						;			       bug when fire bounces. Now using another
     10  10000 ????						;			       color for black pieces. Small optimization.
     11  10000 ????						;
     12  10000 ????
     13  10000 ????				       processor	6502
     14  10000 ????
     15  10000 ????						; Features:
     16  10000 ????						; * Computer plays legal basic chess movements ;)
     17  10000 ????						; * Move with joystick, push button to select, push button to drop.
     18  10000 ????						; * Search depth of 2-ply
     19  10000 ????						; * Promotion of pawns only to queen.
     20  10000 ????						; * No castling
     21  10000 ????						; * No en passant.
     22  10000 ????						; * 1K self-contained size for Hackaday
     23  10000 ????						;
     24  10000 ????						; Assemble with dasm from http://dasm-dillon.sourceforge.net/ 
     25  10000 ????						; Tested with Stella from http://stella.sourceforge.net/
     26  10000 ????						; Tested in real Atari 2600 using Harmony cartridge.
     27  10000 ????
     28  fc00					      org	$fc00
     29  fc00
     30  fc00		       00 00	   VSYNC      =	$00	; 0000 00x0   Vertical Sync Set-Clear
     31  fc00		       00 01	   VBLANK     =	$01	; xx00 00x0   Vertical Blank Set-Clear
     32  fc00		       00 02	   WSYNC      =	$02	; ---- ----   Wait for Horizontal Blank
     33  fc00		       00 03	   RSYNC      =	$03	; ---- ----   Reset Horizontal Sync Counter
     34  fc00		       00 04	   NUSIZ0     =	$04	; 00xx 0xxx   Number-Size player/missile 0
     35  fc00		       00 05	   NUSIZ1     =	$05	; 00xx 0xxx   Number-Size player/missile 1
     36  fc00		       00 06	   COLUP0     =	$06	; xxxx xxx0   Color-Luminance Player 0
     37  fc00		       00 07	   COLUP1     =	$07	; xxxx xxx0   Color-Luminance Player 1
     38  fc00		       00 08	   COLUPF     =	$08	; xxxx xxx0   Color-Luminance Playfield
     39  fc00		       00 09	   COLUBK     =	$09	; xxxx xxx0   Color-Luminance Background
     40  fc00		       00 0a	   CTRLPF     =	$0a	; 00xx 0xxx   Control Playfield, Ball, Collisions
     41  fc00		       00 0b	   REFP0      =	$0b	; 0000 x000   Reflection Player 0
     42  fc00		       00 0c	   REFP1      =	$0c	; 0000 x000   Reflection Player 1
     43  fc00		       00 0d	   PF0	      =	$0d	; xxxx 0000   Playfield Register Byte 0
     44  fc00		       00 0e	   PF1	      =	$0e	; xxxx xxxx   Playfield Register Byte 1
     45  fc00		       00 0f	   PF2	      =	$0f	; xxxx xxxx   Playfield Register Byte 2
     46  fc00		       00 10	   RESP0      =	$10	; ---- ----   Reset Player 0
     47  fc00		       00 11	   RESP1      =	$11	; ---- ----   Reset Player 1
     48  fc00		       00 12	   RESM0      =	$12	; ---- ----   Reset Missle 0
     49  fc00		       00 13	   RESM1      =	$13	; ---- ----   Reset Missle 1
     50  fc00		       00 14	   RESBL      =	$14	; ---- ----   Reset Ball
     51  fc00		       00 15	   AUDC0      =	$15	; 0000 xxxx   Audio Control 0
     52  fc00		       00 16	   AUDC1      =	$16	; 0000 xxxx   Audio Control 1
     53  fc00		       00 17	   AUDF0      =	$17	; 000x xxxx   Audio Frequency 0
     54  fc00		       00 18	   AUDF1      =	$18	; 000x xxxx   Audio Frequency 1
     55  fc00		       00 19	   AUDV0      =	$19	; 0000 xxxx   Audio Volume 0
     56  fc00		       00 1a	   AUDV1      =	$1a	; 0000 xxxx   Audio Volume 1
     57  fc00		       00 1b	   GRP0       =	$1b	; xxxx xxxx   Graphics Register Player 0
     58  fc00		       00 1c	   GRP1       =	$1c	; xxxx xxxx   Graphics Register Player 1
     59  fc00		       00 1d	   ENAM0      =	$1d	; 0000 00x0   Graphics Enable Missile 0
     60  fc00		       00 1e	   ENAM1      =	$1e	; 0000 00x0   Graphics Enable Missile 1
     61  fc00		       00 1f	   ENABL      =	$1f	; 0000 00x0   Graphics Enable Ball
     62  fc00		       00 20	   HMP0       =	$20	; xxxx 0000   Horizontal Motion Player 0
     63  fc00		       00 21	   HMP1       =	$21	; xxxx 0000   Horizontal Motion Player 1
     64  fc00		       00 22	   HMM0       =	$22	; xxxx 0000   Horizontal Motion Missile 0
     65  fc00		       00 23	   HMM1       =	$23	; xxxx 0000   Horizontal Motion Missile 1
     66  fc00		       00 24	   HMBL       =	$24	; xxxx 0000   Horizontal Motion Ball
     67  fc00		       00 25	   VDELP0     =	$25	; 0000 000x   Vertical Delay Player 0
     68  fc00		       00 26	   VDELP1     =	$26	; 0000 000x   Vertical Delay Player 1
     69  fc00		       00 27	   VDELBL     =	$27	; 0000 000x   Vertical Delay Ball
     70  fc00		       00 28	   RESMP0     =	$28	; 0000 00x0   Reset Missile 0 to Player 0
     71  fc00		       00 29	   RESMP1     =	$29	; 0000 00x0   Reset Missile 1 to Player 1
     72  fc00		       00 2a	   HMOVE      =	$2a	; ---- ----   Apply Horizontal Motion
     73  fc00		       00 2b	   HMCLR      =	$2b	; ---- ----   Clear Horizontal Move Registers
     74  fc00		       00 2c	   CXCLR      =	$2c	; ---- ----   Clear Collision Latches
     75  fc00
     76  fc00		       00 00	   CXM0P      =	$00	; xx00 0000	   Read Collision  M0-P1   M0-P0
     77  fc00		       00 01	   CXM1P      =	$01	; xx00 0000			   M1-P0   M1-P1
     78  fc00		       00 02	   CXP0FB     =	$02	; xx00 0000			   P0-PF   P0-BL
     79  fc00		       00 03	   CXP1FB     =	$03	; xx00 0000			   P1-PF   P1-BL
     80  fc00		       00 04	   CXM0FB     =	$04	; xx00 0000			   M0-PF   M0-BL
     81  fc00		       00 05	   CXM1FB     =	$05	; xx00 0000			   M1-PF   M1-BL
     82  fc00		       00 06	   CXBLPF     =	$06	; x000 0000			   BL-PF   -----
     83  fc00		       00 07	   CXPPMM     =	$07	; xx00 0000			   P0-P1   M0-M1
     84  fc00		       00 08	   INPT0      =	$08	; x000 0000	   Read Pot Port 0
     85  fc00		       00 09	   INPT1      =	$09	; x000 0000	   Read Pot Port 1
     86  fc00		       00 0a	   INPT2      =	$0a	; x000 0000	   Read Pot Port 2
     87  fc00		       00 0b	   INPT3      =	$0b	; x000 0000	   Read Pot Port 3
     88  fc00		       00 0c	   INPT4      =	$0c	; x000 0000	   Read Input (Trigger) 0
     89  fc00		       00 0d	   INPT5      =	$0d	; x000 0000	   Read Input (Trigger) 1
     90  fc00
     91  fc00							; RIOT MEMORY MAP
     92  fc00
     93  fc00		       02 80	   SWCHA      =	$280	; Port A data register for joysticks:
     94  fc00							; Bits 4-7 for player 1.  Bits 0-3 for player 2.
     95  fc00		       02 81	   SWACNT     =	$281	; Port A data direction register (DDR)
     96  fc00		       02 82	   SWCHB      =	$282	; Port B data (console switches)
     97  fc00		       02 83	   SWBCNT     =	$283	; Port B DDR
     98  fc00		       02 84	   INTIM      =	$284	; Timer output
     99  fc00
    100  fc00		       02 85	   TIMINT     =	$285
    101  fc00
    102  fc00		       02 94	   TIM1T      =	$294	; set 1 clock interval
    103  fc00		       02 95	   TIM8T      =	$295	; set 8 clock interval
    104  fc00		       02 96	   TIM64T     =	$296	; set 64 clock interval
    105  fc00		       02 97	   T1024T     =	$297	; set 1024 clock interval
    106  fc00
    107  fc00
    108  fc00		       00 80	   score      =	$80	; Current score
    109  fc00		       00 81	   side       =	$81	; Current side
    110  fc00		       00 82	   offset     =	$82	; Current offset
    111  fc00		       00 83	   total      =	$83	; Current total
    112  fc00		       00 84	   origin     =	$84	; Current origin square
    113  fc00		       00 85	   target     =	$85	; Current target square
    114  fc00
    115  fc00		       00 86	   frame      =	$86	; Current frame
    116  fc00
    117  fc00		       00 87	   cursorx    =	$87	; Current X position of cursor
    118  fc00		       00 88	   cursory    =	$88	; Current Y position of cursor
    119  fc00
    120  fc00		       00 89	   pSWCHA     =	$89	; Previous value of SWCHA
    121  fc00		       00 8a	   pINPT4     =	$8A	; Previous value of INPT4
    122  fc00
    123  fc00							; Reused locations
    124  fc00		       00 82	   bitmap0    =	$82	; Index into bitmap (0)
    125  fc00		       00 83	   bitmap1    =	$83	; Index into bitmap (1)
    126  fc00		       00 80	   even       =	$80	; Marks even/odd
    127  fc00
    128  fc00		       00 8c	   board      =	$8c	; 78 bytes used, there should be space for 12+12+10 bytes of stack
    129  fc00
    130  fc00		       00 0e	   color_white =	$0e
    131  fc00		       00 28	   color_black =	$28
    132  fc00		       00 74	   color_white_square =	$74
    133  fc00		       00 70	   color_black_square =	$70
    134  fc00
    135  fc00				   START
    136  fc00		       78		      sei		; Disable interruptions
    137  fc01		       d8		      cld		; Disable decimal mode
    138  fc02							; Clean up the memory
    139  fc02		       a2 ff		      ldx	#$ff	; Load X with $FF...
    140  fc04		       9a		      txs		; ...copy to stack pointer
    141  fc05		       a9 00		      lda	#0	; Load zero in accumulator
    142  fc07		       95 00	   sr0	      sta	0,X	; Save in address 0 plus X
    143  fc09		       ca		      dex		; Decrement X
    144  fc0a		       d0 fb		      bne	sr0	; Repeat until X is zero.
    145  fc0c		       8d 81 02 	      sta	SWACNT	; Allow to read joysticks
    146  fc0f		       8d 83 02 	      sta	SWBCNT	; Allow to read buttons
    147  fc12
    148  fc12							;	 ldx #0       ; x is zero
    149  fc12		       a0 08	   sr1	      ldy	#8
    150  fc14		       a9 00	   sr3	      lda	#$00
    151  fc16		       95 8c		      sta	board,x
    152  fc18		       e8		      inx
    153  fc19		       88		      dey
    154  fc1a		       d0 f8		      bne	sr3
    155  fc1c		       a9 07		      lda	#$07
    156  fc1e		       95 8c		      sta	board,x
    157  fc20		       e8		      inx
    158  fc21		       95 8c		      sta	board,x
    159  fc23		       e8		      inx
    160  fc24		       e0 50		      cpx	#8*10
    161  fc26		       d0 ea		      bne	sr1
    162  fc28		       a2 07		      ldx	#7
    163  fc2a		       bd 0f ff    sr2	      lda	initial,x
    164  fc2d		       95 8c		      sta	board,x
    165  fc2f		       09 08		      ora	#$08
    166  fc31		       95 d2		      sta	board+70,x
    167  fc33		       f6 96		      inc	board+10,x
    168  fc35		       a9 09		      lda	#$09
    169  fc37		       95 c8		      sta	board+60,x
    170  fc39		       ca		      dex
    171  fc3a		       10 ee		      bpl	sr2
    172  fc3c		       a9 04		      lda	#4
    173  fc3e		       85 87		      sta	cursorx
    174  fc40		       85 88		      sta	cursory
    175  fc42
    176  fc42							;
    177  fc42							; Main loop
    178  fc42							;
    179  fc42		       20 74 ff    sr21       jsr	read_coor
    180  fc45		       b9 8c 00 	      lda	board,y
    181  fc48		       29 08		      and	#8	; Check for white piece
    182  fc4a		       f0 f6		      beq	sr21	; If no, jump and restart selection logic
    183  fc4c		       20 74 ff 	      jsr	read_coor
    184  fc4f		       b9 8c 00 	      lda	board,y
    185  fc52		       29 08		      and	#8	; Check for white piece
    186  fc54		       d0 ec		      bne	sr21	; If yes, jump and restart selection logic
    187  fc56		       20 8a fc 	      jsr	sr28	; Make movement
    188  fc59		       a2 3f		      ldx	#63
    189  fc5b		       8a	   kn0	      txa
    190  fc5c		       4a		      lsr
    191  fc5d		       4a		      lsr
    192  fc5e		       85 19		      sta	AUDV0
    193  fc60		       8a		      txa
    194  fc61		       48		      pha
    195  fc62		       20 b2 fd 	      jsr	kernel
    196  fc65		       68		      pla
    197  fc66		       aa		      tax
    198  fc67		       ca		      dex
    199  fc68		       d0 f1		      bne	kn0
    200  fc6a		       20 a6 fc 	      jsr	play	; Computer play
    201  fc6d		       4c 42 fc 	      jmp	sr21
    202  fc70
    203  fc70		       e6 82	   sr14       inc	offset
    204  fc72		       c6 83		      dec	total
    205  fc74		       d0 59		      bne	sr12
    206  fc76		       e8	   sr17       inx
    207  fc77		       e0 4e		      cpx	#78
    208  fc79		       d0 33		      bne	sr7
    209  fc7b		       68		      pla
    210  fc7c		       a8		      tay
    211  fc7d		       68		      pla
    212  fc7e		       ba		      tsx
    213  fc7f		       e0 fd		      cpx	#$ff-2	; Top call? (2 bytes of return address)
    214  fc81		       d0 22		      bne	sr24
    215  fc83		       a6 80		      ldx	score
    216  fc85		       e0 d3		      cpx	#$c0+19	; Illegal move? (always in check)
    217  fc87		       30 1c		      bmi	sr24	; Yes, doesn't move
    218  fc89		       aa		      tax
    219  fc8a		       b5 8c	   sr28       lda	board,x	; Do move
    220  fc8c		       c9 01		      cmp	#1
    221  fc8e		       f0 04		      beq	sr32
    222  fc90		       c9 09		      cmp	#9	; Is it pawn?
    223  fc92		       d0 0a		      bne	sr30
    224  fc94		       c0 0a	   sr32       cpy	#10	; Reaching border?
    225  fc96		       90 04		      bcc	sr31
    226  fc98		       c0 46		      cpy	#70
    227  fc9a		       90 02		      bcc	sr30
    228  fc9c		       49 05	   sr31       eor	#5	; Make it queen
    229  fc9e		       99 8c 00    sr30       sta	board,y
    230  fca1		       a9 00		      lda	#0	; Clear origin square
    231  fca3		       95 8c		      sta	board,x
    232  fca5		       60	   sr24       rts
    233  fca6
    234  fca6							;
    235  fca6							; Computer plays :)
    236  fca6							;
    237  fca6		       a9 c0	   play       lda	#$c0	; Current score (-64)
    238  fca8		       85 80		      sta	score
    239  fcaa		       48		      pha		; Origin square of best movement (currently none)
    240  fcab		       48		      pha		; Target square of best movement
    241  fcac		       a2 00		      ldx	#0	; x points to current square
    242  fcae		       b5 8c	   sr7	      lda	board,x	; Read square
    243  fcb0		       f0 c4		      beq	sr17	; Ignore if empty square
    244  fcb2		       45 81		      eor	side	; XOR with current playing side
    245  fcb4		       c9 07		      cmp	#7	; Ignore if frontier
    246  fcb6		       b0 be		      bcs	sr17
    247  fcb8		       c9 01		      cmp	#1	; Is it pawn?
    248  fcba		       d0 06		      bne	sr25
    249  fcbc		       a4 81		      ldy	side	; Is it playing black?
    250  fcbe		       f0 02		      beq	sr25	; Yes, jump
    251  fcc0		       a9 00		      lda	#0	; Make it zero for white
    252  fcc2		       a8	   sr25       tay
    253  fcc3		       18		      clc
    254  fcc4		       69 04		      adc	#4
    255  fcc6		       29 0c		      and	#$0c
    256  fcc8		       85 83		      sta	total	; Total movements of piece
    257  fcca		       b9 1d ff 	      lda	offsets,y
    258  fccd		       85 82		      sta	offset	; Next offset for movement
    259  fccf		       86 85	   sr12       stx	target	; Restart target square
    260  fcd1		       a4 82	   sr9	      ldy	offset
    261  fcd3		       b9 24 ff 	      lda	displacement,y
    262  fcd6		       18		      clc
    263  fcd7		       65 85		      adc	target	; Next target square
    264  fcd9		       85 85		      sta	target
    265  fcdb		       c9 4e		      cmp	#78	; Out of board?
    266  fcdd		       90 06		      bcc	sr19
    267  fcdf		       4c 70 fc 	      jmp	sr14
    268  fce2
    269  fce2				   sr29
    270  fce2		       4c 9b fd 	      jmp	sr18
    271  fce5
    272  fce5				   sr19
    273  fce5		       c0 10		      cpy	#16
    274  fce7		       a8		      tay
    275  fce8		       b9 8c 00 	      lda	board,y	; Content of target square
    276  fceb		       f0 26		      beq	sr10	; Jump if empty square
    277  fced		       90 06		      bcc	sr27	; Jump if isn't not pawn
    278  fcef		       a5 83		      lda	total
    279  fcf1		       c9 03		      cmp	#3	; Straight?
    280  fcf3		       90 81		      bcc	sr17	; Yes, avoid and cancels any double square movement
    281  fcf5		       b9 8c 00    sr27       lda	board,y
    282  fcf8		       45 81		      eor	side
    283  fcfa		       38		      sec
    284  fcfb		       e9 09		      sbc	#9	; Valid capture?
    285  fcfd		       c9 06		      cmp	#6
    286  fcff		       b0 e1		      bcs	sr29	; No, avoid
    287  fd01		       c9 05		      cmp	#5
    288  fd03		       d0 26		      bne	sr20	; Jump if not captured king
    289  fd05		       68		      pla		; Ignore values
    290  fd06		       68		      pla
    291  fd07		       ba		      tsx
    292  fd08		       a9 2d		      lda	#$3f-18	; Maximum score minus two queens...
    293  fd0a		       e0 fd		      cpx	#$ff-2	; ...if not in first response.
    294  fd0c		       d0 02		      bne	sr26
    295  fd0e		       a9 3f		      lda	#$3f	; Maximum score (probably checkmate/stalemate)
    296  fd10		       85 80	   sr26       sta	score
    297  fd12		       60		      rts
    298  fd13
    299  fd13		       90 16	   sr10       bcc	sr20	; If isn't pawn, jump.
    300  fd15		       a5 83		      lda	total
    301  fd17		       c9 02		      cmp	#2	; Diagonal?
    302  fd19		       f0 04		      beq	sr15	; Jump if one square ahead
    303  fd1b		       b0 7e		      bcs	sr18	; Yes, avoid
    304  fd1d		       90 0c		      bcc	sr20
    305  fd1f
    306  fd1f		       8a	   sr15       txa
    307  fd20		       38		      sec
    308  fd21		       e9 14		      sbc	#20
    309  fd23		       c9 28		      cmp	#40	; Moving from center of board?
    310  fd25		       b0 04		      bcs	sr20
    311  fd27		       c6 83		      dec	total	; Yes, then avoid checking for two squares
    312  fd29		       90 00		      bcc	sr20
    313  fd2b
    314  fd2b							; Save all state
    315  fd2b		       a5 82	   sr20       lda	offset	; Offset for movement
    316  fd2d		       48		      pha
    317  fd2e		       a5 83		      lda	total	; Total directions left
    318  fd30		       48		      pha
    319  fd31		       b9 8c 00 	      lda	board,y	; Content of target square
    320  fd34		       48		      pha
    321  fd35		       98		      tya		; Target square
    322  fd36		       48		      pha
    323  fd37		       b5 8c		      lda	board,x	; Content of origin square
    324  fd39		       48		      pha
    325  fd3a		       8a		      txa		; Origin square
    326  fd3b		       85 84		      sta	origin
    327  fd3d		       48		      pha
    328  fd3e		       b9 8c 00 	      lda	board,y
    329  fd41		       29 07		      and	#7
    330  fd43		       a8		      tay
    331  fd44		       b9 17 ff 	      lda	scores,y	; Score for capture
    332  fd47		       ba		      tsx
    333  fd48							;	 cpx #255-10*2+1 ; Depth limit (1-ply)
    334  fd48		       e0 e2		      cpx	#255-10*3+1	; Depth limit (2-ply)
    335  fd4a		       90 22		      bcc	sr22
    336  fd4c		       48		      pha
    337  fd4d		       a5 80		      lda	score	; Current score
    338  fd4f		       48		      pha
    339  fd50		       a6 84		      ldx	origin
    340  fd52		       a4 85		      ldy	target
    341  fd54		       20 8a fc 	      jsr	sr28	; Do move
    342  fd57		       a5 81		      lda	side
    343  fd59		       49 08		      eor	#8	; Change side
    344  fd5b		       85 81		      sta	side
    345  fd5d		       20 a6 fc 	      jsr	play
    346  fd60		       a5 81		      lda	side
    347  fd62		       49 08		      eor	#8	; Change side
    348  fd64		       85 81		      sta	side
    349  fd66		       68		      pla
    350  fd67		       aa		      tax		; Current score in x
    351  fd68		       68		      pla
    352  fd69		       38		      sec		; Take capture score and substract adversary score
    353  fd6a		       e5 80		      sbc	score
    354  fd6c		       86 80		      stx	score	; Restore current score
    355  fd6e		       c5 80	   sr22       cmp	score	; Better score?
    356  fd70		       18		      clc
    357  fd71		       30 0d		      bmi	sr23	; No, jump
    358  fd73		       d0 08		      bne	sr33
    359  fd75		       a5 86		      lda	frame
    360  fd77		       6a		      ror
    361  fd78		       6a		      ror
    362  fd79		       90 05		      bcc	sr23
    363  fd7b		       b0 03		      bcs	sr23
    364  fd7d		       85 80	   sr33       sta	score	; Update score
    365  fd7f		       38		      sec
    366  fd80		       68	   sr23       pla		; Restore board
    367  fd81		       aa		      tax
    368  fd82		       68		      pla
    369  fd83		       95 8c		      sta	board,x
    370  fd85		       68		      pla
    371  fd86		       85 85		      sta	target
    372  fd88		       a8		      tay
    373  fd89		       68		      pla
    374  fd8a		       99 8c 00 	      sta	board,y
    375  fd8d		       68		      pla
    376  fd8e		       85 83		      sta	total
    377  fd90		       68		      pla
    378  fd91		       85 82		      sta	offset
    379  fd93		       90 06		      bcc	sr18
    380  fd95		       68		      pla
    381  fd96		       68		      pla
    382  fd97		       8a		      txa		; Save current best movement
    383  fd98		       48		      pha
    384  fd99		       98		      tya
    385  fd9a		       48		      pha
    386  fd9b
    387  fd9b		       b5 8c	   sr18       lda	board,x
    388  fd9d		       29 07		      and	#7
    389  fd9f		       c9 01		      cmp	#1	; Was it pawn?
    390  fda1		       f0 0c		      beq	sr16	; Yes, end sequence, choose next movement
    391  fda3		       c9 05		      cmp	#5	; Knight or king?
    392  fda5		       b0 08		      bcs	sr16	; End sequence, choose next movement
    393  fda7		       b9 8c 00 	      lda	board,y	; To empty square?
    394  fdaa		       d0 03		      bne	sr16
    395  fdac		       4c d1 fc 	      jmp	sr9	; Yes, follow line of squares
    396  fdaf
    397  fdaf		       4c 70 fc    sr16       jmp	sr14
    398  fdb2
    399  fdb2							;
    400  fdb2							; Set object in X
    401  fdb2							; A = X position
    402  fdb2							; X = Object to position (0=P0, 1=P1, 2=M0, 3=M1, 4=BALL)
    403  fdb2							;
    404  fdb2					      MAC	set_x_position
    405  fdb2					      sta	WSYNC	; 0- Start line synchro
    406  fdb2					      sec		; 2- Set carry flag (avoids it in loop)
    407  fdb2				   .AE2       sbc	#15	; 4- Uses required time dividing A by 15
    408  fdb2					      bcs	.AE2	; 6/7 - 11/16/21/26/31/36/41/46/51/56/61/66
    409  fdb2					      tay		; 8
    410  fdb2					      lda	fine_adjustment-$f1,y	; 13 - Eats 5 cycles crossing page
    411  fdb2					      sta	HMP0+{1}
    412  fdb2					      nop
    413  fdb2					      sta	RESP0+{1}	; 21/26/31/36/41/46/51/56/61/66/71 - "big" positioning
    414  fdb2					      ENDM
    415  fdb2
    416  fdb2							;
    417  fdb2							; Display kernel
    418  fdb2							;
    419  fdb2				   kernel
    420  fdb2		       a9 00		      lda	#$00
    421  fdb4		       85 09		      sta	COLUBK	; Background color
    422  fdb6
    423  fdb6							; VERTICAL_SYNC
    424  fdb6		       a2 02		      ldx	#2
    425  fdb8		       86 00		      stx	VSYNC	; Start vertical synchro
    426  fdba		       86 02		      stx	WSYNC	; Wait for 3 lines
    427  fdbc		       86 02		      stx	WSYNC
    428  fdbe		       86 02		      stx	WSYNC
    429  fdc0							;
    430  fdc0		       a2 2b		      ldx	#43
    431  fdc2		       8e 96 02 	      stx	TIM64T
    432  fdc5		       85 00		      sta	VSYNC	; Stop vertical synchro
    433  fdc7		       85 1b		      sta	GRP0
    434  fdc9		       85 1c		      sta	GRP1
    435  fdcb		       a9 70		      lda	#color_black_square
    436  fdcd		       85 09		      sta	COLUBK	; Background color
    437  fdcf		       a9 35		      lda	#$35
    438  fdd1		       85 04		      sta	NUSIZ0	; Size of player/missile 0
    439  fdd3		       85 05		      sta	NUSIZ1	; Size of player/missile 1
    440  fdd5		       a9 74		      lda	#color_white_square
    441  fdd7		       85 08		      sta	COLUPF	; Color of playfield
    442  fdd9		       a5 87		      lda	cursorx	; Get X-position of cursor and set up missile 0
    443  fddb		       0a		      asl
    444  fddc		       0a		      asl
    445  fddd		       85 80		      sta	even
    446  fddf		       0a		      asl
    447  fde0		       0a		      asl
    448  fde1		       65 80		      adc	even
    449  fde3		       69 0e		      adc	#14
    450  fde5		       c9 0e		      cmp	#14
    451  fde7		       d0 02		      bne	*+4
    452  fde9		       e9 03		      sbc	#3
      0  fdeb					      set_x_position	2
      1  fdeb		       85 02		      sta	WSYNC
      2  fded		       38		      sec
      3  fdee		       e9 0f	   .AE2       sbc	#15
      4  fdf0		       b0 fc		      bcs	.AE2
      5  fdf2		       a8		      tay
      6  fdf3		       b9 0f fe 	      lda	fine_adjustment-$f1,y
      7  fdf6		       85 22		      sta	HMP0+2
      8  fdf8		       ea		      nop
      9  fdf9		       85 12		      sta	RESP0+2
    454  fdfb		       a5 86		      lda	frame	; Update 2 columns of chessboard per frame
    455  fdfd		       29 03		      and	#3
    456  fdff		       0a		      asl
    457  fe00		       0a		      asl
    458  fe01		       85 80		      sta	even
    459  fe03		       0a		      asl
    460  fe04		       0a		      asl
    461  fe05		       65 80		      adc	even
    462  fe07		       69 08		      adc	#8
    463  fe09		       85 80		      sta	even	; One column for player 0
    464  fe0b		       c9 08		      cmp	#8
    465  fe0d		       d0 02		      bne	*+4
    466  fe0f		       e9 03		      sbc	#3
      0  fe11					      set_x_position	0
      1  fe11		       85 02		      sta	WSYNC
      2  fe13		       38		      sec
      3  fe14		       e9 0f	   .AE2       sbc	#15
      4  fe16		       b0 fc		      bcs	.AE2
      5  fe18		       a8		      tay
      6  fe19		       b9 0f fe 	      lda	fine_adjustment-$f1,y
      7  fe1c		       85 20		      sta	HMP0+0
      8  fe1e		       ea		      nop
      9  fe1f		       85 10		      sta	RESP0+0
    468  fe21		       a5 80		      lda	even
    469  fe23		       18		      clc
    470  fe24		       69 50		      adc	#80	; One column for player 1
      0  fe26					      set_x_position	1
      1  fe26		       85 02		      sta	WSYNC
      2  fe28		       38		      sec
      3  fe29		       e9 0f	   .AE2       sbc	#15
      4  fe2b		       b0 fc		      bcs	.AE2
      5  fe2d		       a8		      tay
      6  fe2e		       b9 0f fe 	      lda	fine_adjustment-$f1,y
      7  fe31		       85 21		      sta	HMP0+1
      8  fe33		       ea		      nop
      9  fe34		       85 11		      sta	RESP0+1
    472  fe36		       85 02		      sta	WSYNC
    473  fe38		       85 2a		      sta	HMOVE	; Fine adjustment for all set_x_position
    474  fe3a
    475  fe3a				   wait_vblank
    476  fe3a		       ad 84 02 	      lda	INTIM
    477  fe3d		       d0 fb		      bne	wait_vblank
    478  fe3f							;
    479  fe3f							; Start of graphics
    480  fe3f							;
    481  fe3f		       85 02		      sta	WSYNC
    482  fe41		       85 01		      sta	VBLANK
    483  fe43		       85 80		      sta	even
    484  fe45		       a5 86		      lda	frame	; Board position per frame
    485  fe47		       29 03		      and	#3
    486  fe49		       aa		      tax
    487  fe4a				   ds0
    488  fe4a		       85 02	   ds1	      sta	WSYNC	; Row 0
    489  fe4c		       a5 80		      lda	even	; Squares configuration over board
    490  fe4e		       4a		      lsr
    491  fe4f		       90 0c		      bcc	ds6
    492  fe51		       a9 00		      lda	#$00
    493  fe53		       85 0d		      sta	PF0
    494  fe55		       a9 7c		      lda	#$7c
    495  fe57		       85 0e		      sta	PF1
    496  fe59		       a9 f8		      lda	#$f8
    497  fe5b		       d0 0a		      bne	ds7
    498  fe5d
    499  fe5d		       a9 f0	   ds6	      lda	#$f0
    500  fe5f		       85 0d		      sta	PF0
    501  fe61		       a9 83		      lda	#$83
    502  fe63		       85 0e		      sta	PF1
    503  fe65		       a9 07		      lda	#$07
    504  fe67		       85 0f	   ds7	      sta	PF2
    505  fe69		       b5 8c		      lda	board,x	; Check color for the two pieces
    506  fe6b		       29 08		      and	#8
    507  fe6d		       f0 02		      beq	ds4
    508  fe6f		       a9 26		      lda	#color_white^color_black	; White for white pieces
    509  fe71		       49 28	   ds4	      eor	#color_black	; Green for black pieces
    510  fe73		       85 06		      sta	COLUP0
    511  fe75		       b5 90		      lda	board+4,x
    512  fe77		       29 08		      and	#8
    513  fe79		       f0 02		      beq	ds5
    514  fe7b		       a9 26		      lda	#color_white^color_black	; White for white pieces
    515  fe7d		       49 28	   ds5	      eor	#color_black	; Green for black pieces
    516  fe7f		       85 07		      sta	COLUP1
    517  fe81		       85 02		      sta	WSYNC	; Row 1
    518  fe83		       a5 80		      lda	even
    519  fe85		       c5 88		      cmp	cursory
    520  fe87		       08		      php
    521  fe88		       68		      pla
    522  fe89		       85 1d		      sta	ENAM0	; Enable missile if at right Y position
    523  fe8b		       b5 8c		      lda	board,x	; Setup pointers to bitmaps for two pieces
    524  fe8d		       29 07		      and	#7
    525  fe8f		       0a		      asl
    526  fe90		       0a		      asl
    527  fe91		       0a		      asl
    528  fe92		       85 82		      sta	bitmap0
    529  fe94		       b5 90		      lda	board+4,x
    530  fe96		       29 07		      and	#7
    531  fe98		       0a		      asl
    532  fe99		       0a		      asl
    533  fe9a		       0a		      asl
    534  fe9b		       85 83		      sta	bitmap1
    535  fe9d		       8a		      txa
    536  fe9e		       48		      pha
    537  fe9f		       a0 07		      ldy	#7	; Process the 7 lines of bitmap
    538  fea1		       85 02	   ds3	      sta	WSYNC	; Row 2/5/8/11/14/17/20
    539  fea3		       a6 82		      ldx	bitmap0
    540  fea5		       bd 3c ff 	      lda	pieces,x
    541  fea8		       85 1b		      sta	GRP0
    542  feaa		       a6 83		      ldx	bitmap1
    543  feac		       bd 3c ff 	      lda	pieces,x
    544  feaf		       85 1c		      sta	GRP1
    545  feb1		       85 02		      sta	WSYNC
    546  feb3		       85 02		      sta	WSYNC
    547  feb5		       e6 82		      inc	bitmap0
    548  feb7		       e6 83		      inc	bitmap1
    549  feb9		       88		      dey
    550  feba		       d0 e5		      bne	ds3
    551  febc		       84 1d		      sty	ENAM0	; Disable cursor
    552  febe		       e6 80		      inc	even
    553  fec0		       68		      pla
    554  fec1		       18		      clc
    555  fec2		       69 0a		      adc	#10	; Next row of board
    556  fec4		       aa		      tax
    557  fec5		       c9 50		      cmp	#80
    558  fec7		       90 81		      bcc	ds0
    559  fec9
    560  fec9							;
    561  fec9							; End of graphics (204 lines)
    562  fec9							;
    563  fec9		       a9 02		      lda	#2
    564  fecb		       85 02		      sta	WSYNC
    565  fecd		       85 01		      sta	VBLANK
    566  fecf
    567  fecf							;
    568  fecf							; Start overscan timer
    569  fecf							;
    570  fecf		       a9 2b		      lda	#43	; 37 lines * 76 = 2812 cycles / 64 = 43.9375
    571  fed1		       8d 96 02 	      sta	TIM64T
    572  fed4				   wait_overscan
    573  fed4		       ad 84 02 	      lda	INTIM
    574  fed7		       d0 fb		      bne	wait_overscan
    575  fed9		       85 02		      sta	WSYNC
    576  fedb		       85 0d		      sta	PF0
    577  fedd		       85 0e		      sta	PF1
    578  fedf		       85 0f		      sta	PF2
    579  fee1		       85 02		      sta	WSYNC
    580  fee3
    581  fee3		       e6 86		      inc	frame
    582  fee5
    583  fee5		       60		      rts
    584  fee6
 Free bytes section 1:  $1a
    585  fee6					      echo	"Free bytes section 1: ",$ff00-*
    586  fee6
    587  ff00					      org	$ff00
    588  ff00				   fine_adjustment
    589  ff00		       70		      .byte.b	$70	; -7 
    590  ff01		       60		      .byte.b	$60	; -6 
    591  ff02		       50		      .byte.b	$50	; -5
    592  ff03		       40		      .byte.b	$40	; -4
    593  ff04		       30		      .byte.b	$30	; -3
    594  ff05		       20		      .byte.b	$20	; -2
    595  ff06		       10		      .byte.b	$10	; -1
    596  ff07		       00		      .byte.b	$00	; 0
    597  ff08		       f0		      .byte.b	$f0	; +1
    598  ff09		       e0		      .byte.b	$e0	; +2
    599  ff0a		       d0		      .byte.b	$d0	; +3
    600  ff0b		       c0		      .byte.b	$c0	; +4
    601  ff0c		       b0		      .byte.b	$b0	; +5
    602  ff0d		       a0		      .byte.b	$a0	; +6
    603  ff0e		       90		      .byte.b	$90	; +7
    604  ff0f
    605  ff0f				   initial
    606  ff0f		       02 05 03 04*	      .byte.b	$02,$05,$03,$04,$06,$03,$05,$02
    607  ff17
    608  ff17				   scores
    609  ff17		       00 01 05 03*	      .byte.b	0,1,5,3,9,3
    610  ff1d
    611  ff1d				   offsets
    612  ff1d		       10 14 08 0c*	      .byte.b	16,20,8,12,8,0,8
    613  ff24
    614  ff24				   displacement
    615  ff24		       eb ed f4 f8*	      .byte.b	-21,-19,-12,-8,8,12,19,21
    616  ff2c		       f6 0a ff 01	      .byte.b	-10,10,-1,1
    617  ff30		       09 0b f7 f5	      .byte.b	9,11,-9,-11
    618  ff34		       f5 f7 f6 ec	      .byte.b	-11,-9,-10,-20
    619  ff38		       09 0b 0a 14	      .byte.b	9,11,10,20
    620  ff3c
    621  ff3c				   pieces
    622  ff3c		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00
    623  ff44		       00 18 3c 3c*	      .byte.b	$00,$18,$3c,$3c,$18,$3c,$00,$00
    624  ff4c		       5a 7e 3c 3c*	      .byte.b	$5a,$7e,$3c,$3c,$7e,$7e,$00,$00
    625  ff54		       18 3c 3c 3c*	      .byte.b	$18,$3c,$3c,$3c,$18,$66,$00,$00
    626  ff5c		       5a 5a 24 3c*	      .byte.b	$5a,$5a,$24,$3c,$3c,$3c,$00,$00
    627  ff64		       70 58 7c 6e*	      .byte.b	$70,$58,$7c,$6e,$1e,$3e,$00,$00
    628  ff6c		       3c 6a 56 3c*	      .byte.b	$3c,$6a,$56,$3c,$3c,$3c,$00,$00
    629  ff74
    630  ff74							;
    631  ff74							; Read a coordinate choosen by cursor
    632  ff74							; Moves y to x, y contains new coordinate.
    633  ff74							;
    634  ff74				   read_coor
    635  ff74		       98		      tya
    636  ff75		       48		      pha
    637  ff76		       20 7d ff 	      jsr	read_coor2
    638  ff79		       a8		      tay
    639  ff7a		       68		      pla
    640  ff7b		       aa		      tax
    641  ff7c		       60		      rts
    642  ff7d
    643  ff7d							;
    644  ff7d							; Read a coordinate in a
    645  ff7d							;
    646  ff7d				   read_coor2
    647  ff7d		       20 b2 fd 	      jsr	kernel
    648  ff80		       a9 00		      lda	#0
    649  ff82		       85 19		      sta	AUDV0
    650  ff84		       a5 0c		      lda	INPT4	; Read current state of button
    651  ff86		       85 80		      sta	even
    652  ff88		       45 8a		      eor	pINPT4
    653  ff8a		       49 ff		      eor	#$ff
    654  ff8c		       05 80		      ora	even	; Disable unchanged button
    655  ff8e		       48		      pha
    656  ff8f		       a5 80		      lda	even
    657  ff91		       85 8a		      sta	pINPT4
    658  ff93		       68		      pla
    659  ff94		       30 14		      bmi	rc5	; Jump if button not pressed
    660  ff96							;
    661  ff96							; Computer plays
    662  ff96							;
    663  ff96		       a2 03		      ldx	#$03
    664  ff98		       86 15		      stx	AUDC0
    665  ff9a		       a2 08		      ldx	#$08
    666  ff9c		       86 19		      stx	AUDV0
    667  ff9e		       86 17		      stx	AUDF0
    668  ffa0		       a5 88		      lda	cursory	; y_coor 
    669  ffa2		       0a		      asl		; *2
    670  ffa3		       0a		      asl		; *4
    671  ffa4		       65 88		      adc	cursory	; *5
    672  ffa6		       0a		      asl		; *10
    673  ffa7		       65 87		      adc	cursorx	; + x_coor
    674  ffa9		       60		      rts
    675  ffaa
    676  ffaa		       ad 80 02    rc5	      lda	SWCHA	; Read current state of joystick
    677  ffad		       85 80		      sta	even
    678  ffaf		       45 89		      eor	pSWCHA
    679  ffb1		       49 ff		      eor	#$ff
    680  ffb3		       05 80		      ora	even	; Disable unchanged directions
    681  ffb5		       48		      pha
    682  ffb6		       a5 80		      lda	even
    683  ffb8		       85 89		      sta	pSWCHA
    684  ffba		       68		      pla
    685  ffbb		       30 0b		      bmi	rc0	; Jump if not going right
    686  ffbd		       a6 87		      ldx	cursorx
    687  ffbf		       e0 07		      cpx	#7
    688  ffc1		       f0 05		      beq	rc0
    689  ffc3		       e6 87		      inc	cursorx
    690  ffc5		       20 f1 ff 	      jsr	sound_effect0
    691  ffc8
    692  ffc8		       2a	   rc0	      rol		; Jump if not going left
    693  ffc9		       30 09		      bmi	rc1
    694  ffcb		       a6 87		      ldx	cursorx
    695  ffcd		       f0 05		      beq	rc1
    696  ffcf		       c6 87		      dec	cursorx
    697  ffd1		       20 f1 ff 	      jsr	sound_effect0
    698  ffd4
    699  ffd4		       2a	   rc1	      rol		; Jump if not going down
    700  ffd5		       30 0b		      bmi	rc2
    701  ffd7		       a6 88		      ldx	cursory
    702  ffd9		       e0 07		      cpx	#7
    703  ffdb		       f0 05		      beq	rc2
    704  ffdd		       e6 88		      inc	cursory
    705  ffdf		       20 f1 ff 	      jsr	sound_effect0
    706  ffe2
    707  ffe2		       2a	   rc2	      rol		; Jump if not going up
    708  ffe3		       30 09		      bmi	rc3
    709  ffe5		       a6 88		      ldx	cursory
    710  ffe7		       f0 05		      beq	rc3
    711  ffe9		       c6 88		      dec	cursory
    712  ffeb		       20 f1 ff 	      jsr	sound_effect0
    713  ffee				   rc3
    714  ffee		       4c 7d ff 	      jmp	read_coor2
    715  fff1
    716  fff1							;
    717  fff1							; Selection of piece
    718  fff1							;
    719  fff1				   sound_effect0
    720  fff1		       a2 01		      ldx	#$01
    721  fff3		       86 15		      stx	AUDC0
    722  fff5		       a2 08		      ldx	#$08
    723  fff7		       86 19		      stx	AUDV0
    724  fff9		       86 17		      stx	AUDF0
    725  fffb		       60		      rts
    726  fffc
 Free bytes section 2:  $0
    727  fffc					      echo	"Free bytes section 2: ",$fffc-*
    728  fffc
    729  fffc					      org	$fffc
    730  fffc		       00 fc		      .word.w	START	; RESET
    731  fffe		       00 fc		      .word.w	START	; BRK
