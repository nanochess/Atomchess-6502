------- FILE toledo_atomchess_6502.asm LEVEL 1 PASS 2
      1  10000 ????						;
      2  10000 ????						; Toledo Atomchess 6502 for Atari VCS/2600
      3  10000 ????						;
      4  10000 ????						; by Óscar Toledo G. (nanochess)
      5  10000 ????						;
      6  10000 ????						; © Copyright 2017 Óscar Toledo Gutiérrez
      7  10000 ????						;
      8  10000 ????						; Creation date: Jan/02/2017. Ported from Toledo Atomchess x86.
      9  10000 ????						; Revision date: Jan/04/2017. Working board display logic and selection.
     10  10000 ????						; Revision date: Jan/05/2017. Avoid player to move non-white pieces or
     11  10000 ????						;			       bug when fire bounces. Now using another
     12  10000 ????						;			       color for black pieces. Small optimization.
     13  10000 ????						; Revision date: Jan/13/2017. Solved bug where it would answer with move
     14  10000 ????						;			       after checkmate. Some more comments.
     15  10000 ????						; Revision date: Jan/15/2017. Added size optimizations by Peter Ferrie,
     16  10000 ????						;			       19 bytes saved. Also I've optimized my
     17  10000 ????						;			       graphical/input interface for further 18
     18  10000 ????						;			       bytes.
     19  10000 ????						; Revision date: Jan/16/2017. Saved 2 bytes more in playfield setup for
     20  10000 ????						;			       squares (Ferrie). Taken note of which
     21  10000 ????						;			       instructions can trigger the oVerflow flag.
     22  10000 ????						;			       Now can be assembled for visual6502.org
     23  10000 ????						;
     24  10000 ????
     25  10000 ????				       processor	6502
     26  10000 ????
     27  10000 ????		00 00	    atari      =	$00	; Define this to create an Atari VCS/2600 game (1K ROM)
     28  10000 ????		00 01	    visual6502 =	$01	; Define this to create a Visual6502.org playable game.
     29  10000 ????
     30  10000 ????						;
     31  10000 ????						; Change this to your preference.
     32  10000 ????						;
     33  10000 ????		00 00	    mode       =	atari
     34  10000 ????
     35  10000 ????						; Features:
     36  10000 ????						; * Computer plays legal basic chess movements ;)
     37  10000 ????						; * Move with joystick, push button to select, push button to drop.
     38  10000 ????						; * Search depth of 2-ply
     39  10000 ????						; * Promotion of pawns only to queen.
     40  10000 ????						; * No castling
     41  10000 ????						; * No en passant.
     42  10000 ????						; * 1K self-contained size for Hackaday
     43  10000 ????						;
     44  10000 ????						; Assemble with dasm from http://dasm-dillon.sourceforge.net/ 
     45  10000 ????						; Tested with Stella from http://stella.sourceforge.net/
     46  10000 ????						; Tested in real Atari 2600 using Harmony cartridge.
     47  10000 ????						; Tested with online emulation from http://8bitworkshop.com/
     48  10000 ????						; Demostration video at https://www.youtube.com/watch?v=_Du4krvIl7o
     49  10000 ????
     50  10000 ????				       if	mode = atari
     51  10000 ????
     52  fc00					      org	$fc00
     53  fc00		       00 00	   VSYNC      =	$00	; 0000 00x0   Vertical Sync Set-Clear
     54  fc00		       00 01	   VBLANK     =	$01	; xx00 00x0   Vertical Blank Set-Clear
     55  fc00		       00 02	   WSYNC      =	$02	; ---- ----   Wait for Horizontal Blank
     56  fc00		       00 03	   RSYNC      =	$03	; ---- ----   Reset Horizontal Sync Counter
     57  fc00		       00 04	   NUSIZ0     =	$04	; 00xx 0xxx   Number-Size player/missile 0
     58  fc00		       00 05	   NUSIZ1     =	$05	; 00xx 0xxx   Number-Size player/missile 1
     59  fc00		       00 06	   COLUP0     =	$06	; xxxx xxx0   Color-Luminance Player 0
     60  fc00		       00 07	   COLUP1     =	$07	; xxxx xxx0   Color-Luminance Player 1
     61  fc00		       00 08	   COLUPF     =	$08	; xxxx xxx0   Color-Luminance Playfield
     62  fc00		       00 09	   COLUBK     =	$09	; xxxx xxx0   Color-Luminance Background
     63  fc00		       00 0a	   CTRLPF     =	$0a	; 00xx 0xxx   Control Playfield, Ball, Collisions
     64  fc00		       00 0b	   REFP0      =	$0b	; 0000 x000   Reflection Player 0
     65  fc00		       00 0c	   REFP1      =	$0c	; 0000 x000   Reflection Player 1
     66  fc00		       00 0d	   PF0	      =	$0d	; xxxx 0000   Playfield Register Byte 0
     67  fc00		       00 0e	   PF1	      =	$0e	; xxxx xxxx   Playfield Register Byte 1
     68  fc00		       00 0f	   PF2	      =	$0f	; xxxx xxxx   Playfield Register Byte 2
     69  fc00		       00 10	   RESP0      =	$10	; ---- ----   Reset Player 0
     70  fc00		       00 11	   RESP1      =	$11	; ---- ----   Reset Player 1
     71  fc00		       00 12	   RESM0      =	$12	; ---- ----   Reset Missle 0
     72  fc00		       00 13	   RESM1      =	$13	; ---- ----   Reset Missle 1
     73  fc00		       00 14	   RESBL      =	$14	; ---- ----   Reset Ball
     74  fc00		       00 15	   AUDC0      =	$15	; 0000 xxxx   Audio Control 0
     75  fc00		       00 16	   AUDC1      =	$16	; 0000 xxxx   Audio Control 1
     76  fc00		       00 17	   AUDF0      =	$17	; 000x xxxx   Audio Frequency 0
     77  fc00		       00 18	   AUDF1      =	$18	; 000x xxxx   Audio Frequency 1
     78  fc00		       00 19	   AUDV0      =	$19	; 0000 xxxx   Audio Volume 0
     79  fc00		       00 1a	   AUDV1      =	$1a	; 0000 xxxx   Audio Volume 1
     80  fc00		       00 1b	   GRP0       =	$1b	; xxxx xxxx   Graphics Register Player 0
     81  fc00		       00 1c	   GRP1       =	$1c	; xxxx xxxx   Graphics Register Player 1
     82  fc00		       00 1d	   ENAM0      =	$1d	; 0000 00x0   Graphics Enable Missile 0
     83  fc00		       00 1e	   ENAM1      =	$1e	; 0000 00x0   Graphics Enable Missile 1
     84  fc00		       00 1f	   ENABL      =	$1f	; 0000 00x0   Graphics Enable Ball
     85  fc00		       00 20	   HMP0       =	$20	; xxxx 0000   Horizontal Motion Player 0
     86  fc00		       00 21	   HMP1       =	$21	; xxxx 0000   Horizontal Motion Player 1
     87  fc00		       00 22	   HMM0       =	$22	; xxxx 0000   Horizontal Motion Missile 0
     88  fc00		       00 23	   HMM1       =	$23	; xxxx 0000   Horizontal Motion Missile 1
     89  fc00		       00 24	   HMBL       =	$24	; xxxx 0000   Horizontal Motion Ball
     90  fc00		       00 25	   VDELP0     =	$25	; 0000 000x   Vertical Delay Player 0
     91  fc00		       00 26	   VDELP1     =	$26	; 0000 000x   Vertical Delay Player 1
     92  fc00		       00 27	   VDELBL     =	$27	; 0000 000x   Vertical Delay Ball
     93  fc00		       00 28	   RESMP0     =	$28	; 0000 00x0   Reset Missile 0 to Player 0
     94  fc00		       00 29	   RESMP1     =	$29	; 0000 00x0   Reset Missile 1 to Player 1
     95  fc00		       00 2a	   HMOVE      =	$2a	; ---- ----   Apply Horizontal Motion
     96  fc00		       00 2b	   HMCLR      =	$2b	; ---- ----   Clear Horizontal Move Registers
     97  fc00		       00 2c	   CXCLR      =	$2c	; ---- ----   Clear Collision Latches
     98  fc00
     99  fc00		       00 00	   CXM0P      =	$00	; xx00 0000	   Read Collision  M0-P1   M0-P0
    100  fc00		       00 01	   CXM1P      =	$01	; xx00 0000			   M1-P0   M1-P1
    101  fc00		       00 02	   CXP0FB     =	$02	; xx00 0000			   P0-PF   P0-BL
    102  fc00		       00 03	   CXP1FB     =	$03	; xx00 0000			   P1-PF   P1-BL
    103  fc00		       00 04	   CXM0FB     =	$04	; xx00 0000			   M0-PF   M0-BL
    104  fc00		       00 05	   CXM1FB     =	$05	; xx00 0000			   M1-PF   M1-BL
    105  fc00		       00 06	   CXBLPF     =	$06	; x000 0000			   BL-PF   -----
    106  fc00		       00 07	   CXPPMM     =	$07	; xx00 0000			   P0-P1   M0-M1
    107  fc00		       00 08	   INPT0      =	$08	; x000 0000	   Read Pot Port 0
    108  fc00		       00 09	   INPT1      =	$09	; x000 0000	   Read Pot Port 1
    109  fc00		       00 0a	   INPT2      =	$0a	; x000 0000	   Read Pot Port 2
    110  fc00		       00 0b	   INPT3      =	$0b	; x000 0000	   Read Pot Port 3
    111  fc00		       00 0c	   INPT4      =	$0c	; x000 0000	   Read Input (Trigger) 0
    112  fc00		       00 0d	   INPT5      =	$0d	; x000 0000	   Read Input (Trigger) 1
    113  fc00
    114  fc00							; RIOT MEMORY MAP
    115  fc00
    116  fc00		       02 80	   SWCHA      =	$280	; Port A data register for joysticks:
    117  fc00							; Bits 4-7 for player 1.  Bits 0-3 for player 2.
    118  fc00		       02 81	   SWACNT     =	$281	; Port A data direction register (DDR)
    119  fc00		       02 82	   SWCHB      =	$282	; Port B data (console switches)
    120  fc00		       02 83	   SWBCNT     =	$283	; Port B DDR
    121  fc00		       02 84	   INTIM      =	$284	; Timer output
    122  fc00
    123  fc00		       02 85	   TIMINT     =	$285
    124  fc00
    125  fc00		       02 94	   TIM1T      =	$294	; set 1 clock interval
    126  fc00		       02 95	   TIM8T      =	$295	; set 8 clock interval
    127  fc00		       02 96	   TIM64T     =	$296	; set 64 clock interval
    128  fc00		       02 97	   T1024T     =	$297	; set 1024 clock interval
    129  fc00
    130  fc00							;
    131  fc00							; These are colors for NTSC video, change for PAL
    132  fc00							;
    133  fc00		       00 0e	   color_white =	$0e	; Color for white pieces
    134  fc00		       00 28	   color_black =	$28	; Color for black pieces
    135  fc00		       00 74	   color_white_square =	$74	; Color for white squares
    136  fc00		       00 70	   color_black_square =	$70	; Color for black squares
    137  fc00
    138  fc00				  -	      else
    139  fc00				  -	      org	$0100
    140  fc00					      endif
    141  fc00
    142  fc00		       00 80	   score      =	$80	; Current score
    143  fc00		       00 81	   side       =	$81	; Current side
    144  fc00		       00 82	   offset     =	$82	; Current offset
    145  fc00		       00 83	   total      =	$83	; Current total
    146  fc00		       00 84	   origin     =	$84	; Current origin square
    147  fc00		       00 85	   target     =	$85	; Current target square
    148  fc00
    149  fc00		       00 86	   frame      =	$86	; Current frame
    150  fc00
    151  fc00		       00 87	   cursorx    =	$87	; Current X position of cursor
    152  fc00		       00 88	   cursory    =	$88	; Current Y position of cursor
    153  fc00
    154  fc00		       00 89	   pSWCHA     =	$89	; Previous value of SWCHA
    155  fc00		       00 8a	   pINPT4     =	$8A	; Previous value of INPT4
    156  fc00
    157  fc00							; Reused locations
    158  fc00		       00 82	   bitmap0    =	$82	; Index into bitmap (0)
    159  fc00		       00 83	   bitmap1    =	$83	; Index into bitmap (1)
    160  fc00		       00 81	   bitmap2    =	$81	; Index into bitmap (2)
    161  fc00		       00 8b	   bitmap3    =	$8b	; Index into bitmap (3)
    162  fc00		       00 80	   even       =	$80	; Marks even/odd
    163  fc00
    164  fc00		       00 8c	   board      =	$8c	; 78 bytes used, there should be space for 12+12+10 bytes of stack
    165  fc00
    166  fc00				   START
    167  fc00		       78		      sei		; Disable interruptions
    168  fc01		       d8		      cld		; Disable decimal mode
    169  fc02					      if	mode = atari
    170  fc02							; Clean up the memory
    171  fc02		       a9 00		      lda	#0	; Load zero in accumulator
    172  fc04		       aa		      tax		; ...copy in X
    173  fc05		       95 00	   sr0	      sta	0,X	; Save in address 0 plus X
    174  fc07		       9a		      txs		; Copy X in S (stack) last value will be $ff
    175  fc08		       e8		      inx		; Increment X
    176  fc09		       d0 fa		      bne	sr0	; Repeat until X is zero.
    177  fc0b
    178  fc0b		       8d 81 02 	      sta	SWACNT	; Allow to read joysticks
    179  fc0e		       8d 83 02 	      sta	SWBCNT	; Allow to read buttons
    180  fc11							;	 ldx #0       ; x is zero
    181  fc11				  -	      else
    182  fc11				  -			; Clean up the memory
    183  fc11				  -	      ldx	#$ff
    184  fc11				  -	      txs
    185  fc11				  -	      lda	#$00	; Load zero in accumulator
    186  fc11				  -	      ldx	#$80	; ...copy in X
    187  fc11				  -sr0	      sta	0,X	; Save in address 0 plus X
    188  fc11				  -	      inx		; Increment X
    189  fc11				  -	      cpx	#$8c
    190  fc11				  -	      bne	sr0	; Repeat until X is zero.
    191  fc11				  -	      tax		; x is zero
    192  fc11					      endif
    193  fc11
    194  fc11		       a0 08	   sr1	      ldy	#8
    195  fc13		       a9 00	   sr3	      lda	#$00
    196  fc15		       95 8c		      sta	board,x
    197  fc17		       e8		      inx
    198  fc18		       88		      dey
    199  fc19		       d0 f8		      bne	sr3
    200  fc1b		       a9 07		      lda	#$07
    201  fc1d		       95 8c		      sta	board,x
    202  fc1f		       e8		      inx
    203  fc20		       95 8c		      sta	board,x
    204  fc22		       e8		      inx
    205  fc23		       e0 50		      cpx	#8*10
    206  fc25		       d0 ea		      bne	sr1
    207  fc27		       aa		      tax		; a was $07, so x = $07
    208  fc28		       bd a2 ff    sr2	      lda	initial,x
    209  fc2b		       95 8c		      sta	board,x
    210  fc2d		       09 08		      ora	#$08
    211  fc2f		       95 d2		      sta	board+70,x
    212  fc31		       f6 96		      inc	board+10,x
    213  fc33		       a9 09		      lda	#$09
    214  fc35		       95 c8		      sta	board+60,x
    215  fc37		       ca		      dex
    216  fc38		       10 ee		      bpl	sr2
    217  fc3a		       4a		      lsr		; lda #4, but A was $09 / 2 = $04
    218  fc3b		       85 87		      sta	cursorx
    219  fc3d		       85 88		      sta	cursory
    220  fc3f
    221  fc3f							;
    222  fc3f							; Main loop
    223  fc3f							;
    224  fc3f				   sr21
    225  fc3f					      if	mode = atari
    226  fc3f				  -	      else
    227  fc3f				  -	      jsr	kernel
    228  fc3f					      endif
    229  fc3f		       20 67 ff 	      jsr	read_coor
    230  fc42		       b9 8c 00 	      lda	board,y
    231  fc45		       29 08		      and	#8	; Check for white piece
    232  fc47		       f0 f6		      beq	sr21	; If no, jump and restart selection logic
    233  fc49		       20 67 ff    sr11       jsr	read_coor
    234  fc4c		       b9 8c 00 	      lda	board,y
    235  fc4f		       29 08		      and	#8	; Check for white piece
    236  fc51		       d0 f6		      bne	sr11	; If yes, restart target square logic
    237  fc53		       20 87 fc 	      jsr	sr28	; Make movement
    238  fc56					      if	mode = atari
    239  fc56		       a2 3f		      ldx	#63
    240  fc58		       8a	   kn0	      txa
    241  fc59		       4a		      lsr
    242  fc5a		       4a		      lsr
    243  fc5b		       85 19		      sta	AUDV0
    244  fc5d		       8a		      txa
    245  fc5e		       48		      pha
    246  fc5f		       20 a4 fd 	      jsr	kernel
    247  fc62		       68		      pla
    248  fc63		       aa		      tax
    249  fc64		       ca		      dex
    250  fc65		       d0 f1		      bne	kn0
    251  fc67				  -	      else
    252  fc67				  -	      jsr	kernel
    253  fc67					      endif
    254  fc67		       20 a3 fc 	      jsr	play	; Computer play
    255  fc6a		       4c 3f fc 	      jmp	sr21
    256  fc6d
    257  fc6d		       e6 82	   sr14       inc	offset
    258  fc6f		       c6 83		      dec	total
    259  fc71		       d0 58		      bne	sr12
    260  fc73		       e8	   sr17       inx
    261  fc74		       e0 4e		      cpx	#78
    262  fc76		       d0 33		      bne	sr7
    263  fc78		       68		      pla
    264  fc79		       a8		      tay
    265  fc7a		       68		      pla
    266  fc7b		       ba		      tsx
    267  fc7c		       e0 fd		      cpx	#$ff-2	; Top call? (2 bytes of return address)
    268  fc7e		       d0 22		      bne	sr24
    269  fc80		       a6 80		      ldx	score
    270  fc82		       e0 d3		      cpx	#$c0+19	; Illegal move? (always in check)
    271  fc84		       30 1c		      bmi	sr24	; Yes, doesn't move
    272  fc86		       aa		      tax
    273  fc87		       b5 8c	   sr28       lda	board,x	; Do move
    274  fc89		       c9 01		      cmp	#1
    275  fc8b		       f0 04		      beq	sr32
    276  fc8d		       c9 09		      cmp	#9	; Is it pawn?
    277  fc8f		       d0 0a		      bne	sr30
    278  fc91		       c0 0a	   sr32       cpy	#10	; Reaching border?
    279  fc93		       90 04		      bcc	sr31
    280  fc95		       c0 46		      cpy	#70
    281  fc97		       90 02		      bcc	sr30
    282  fc99		       49 05	   sr31       eor	#5	; Make it queen
    283  fc9b		       99 8c 00    sr30       sta	board,y
    284  fc9e		       a9 00		      lda	#0	; Clear origin square
    285  fca0		       95 8c		      sta	board,x
    286  fca2		       60	   sr24       rts
    287  fca3
    288  fca3							;
    289  fca3							; Computer plays :)
    290  fca3							;
    291  fca3		       a9 c0	   play       lda	#$c0	; Current score (-64)
    292  fca5		       85 80		      sta	score
    293  fca7		       48		      pha		; Origin square of best movement (currently none)
    294  fca8		       48		      pha		; Target square of best movement
    295  fca9		       a2 00		      ldx	#0	; x points to current square
    296  fcab		       b5 8c	   sr7	      lda	board,x	; Read square
    297  fcad		       f0 c4		      beq	sr17	; Ignore if empty square
    298  fcaf		       45 81		      eor	side	; XOR with current playing side
    299  fcb1		       c9 07		      cmp	#7	; Ignore if frontier
    300  fcb3		       b0 be		      bcs	sr17
    301  fcb5		       c9 01		      cmp	#1	; Is it pawn?
    302  fcb7		       d0 06		      bne	sr25	; Carry will be 1 always because 1<=A<=6
    303  fcb9		       a4 81		      ldy	side	; Is it playing black?
    304  fcbb		       f0 02		      beq	sr25	; Yes, jump
    305  fcbd		       a9 00		      lda	#0	; Make it zero for white
    306  fcbf		       a8	   sr25       tay
    307  fcc0		       69 03		      adc	#3	; Adds 4 because carry is 1 (see above)
    308  fcc2		       29 0c		      and	#$0c
    309  fcc4		       85 83		      sta	total	; Total movements of piece
    310  fcc6		       b9 b0 ff 	      lda	offsets,y
    311  fcc9		       85 82		      sta	offset	; Next offset for movement
    312  fccb		       86 85	   sr12       stx	target	; Restart target square
    313  fccd		       a4 82	   sr9	      ldy	offset
    314  fccf		       b9 b7 ff 	      lda	displacement,y
    315  fcd2		       18		      clc
    316  fcd3		       65 85		      adc	target	; Next target square
    317  fcd5		       c9 4e		      cmp	#78	; Out of board?
    318  fcd7		       b0 94		      bcs	sr14
    319  fcd9		       85 85		      sta	target
    320  fcdb
    321  fcdb		       c0 10		      cpy	#16
    322  fcdd		       a8		      tay
    323  fcde		       b9 8c 00 	      lda	board,y	; Content of target square
    324  fce1		       f0 26		      beq	sr10	; Jump if empty square
    325  fce3		       90 06		      bcc	sr27	; Jump if isn't not pawn
    326  fce5		       a5 83		      lda	total
    327  fce7		       c9 03		      cmp	#3	; Straight?
    328  fce9		       90 88		      bcc	sr17	; Yes, avoid and cancels any double square movement
    329  fceb		       b9 8c 00    sr27       lda	board,y
    330  fcee		       45 81		      eor	side
    331  fcf0		       38		      sec
    332  fcf1		       e9 09		      sbc	#9	; Valid capture?
    333  fcf3		       c9 06		      cmp	#6
    334  fcf5		       b0 1a		      bcs	sr29	; No, avoid (too far for sr18, use sr29 as bridge)
    335  fcf7		       c9 05		      cmp	#5
    336  fcf9		       d0 23		      bne	sr20	; Jump if not captured king
    337  fcfb		       68		      pla		; Ignore values
    338  fcfc		       68		      pla
    339  fcfd		       ba		      tsx
    340  fcfe		       a9 2d		      lda	#$3f-18	; Maximum score minus two queens...
    341  fd00		       e0 f1		      cpx	#$f1	; ...if not in first response.
    342  fd02		       d0 02		      bne	sr26
    343  fd04		       a9 3f		      lda	#$3f	; Maximum score (probably checkmate/stalemate)
    344  fd06		       85 80	   sr26       sta	score
    345  fd08		       60		      rts
    346  fd09
    347  fd09		       90 13	   sr10       bcc	sr20	; If isn't pawn, jump.
    348  fd0b		       a5 83		      lda	total
    349  fd0d		       c9 02		      cmp	#2	; Diagonal?
    350  fd0f		       f0 04		      beq	sr15	; Jump if one square ahead
    351  fd11		       b0 7a	   sr29       bcs	sr18	; Yes, avoid
    352  fd13		       90 09		      bcc	sr20
    353  fd15
    354  fd15		       8a	   sr15       txa
    355  fd16							;sec		 ; Carry set already because equality comparison
    356  fd16		       e9 14		      sbc	#20
    357  fd18		       c9 28		      cmp	#40	; Moving from center of board?
    358  fd1a		       b0 02		      bcs	sr20
    359  fd1c		       c6 83		      dec	total	; Yes, then avoid checking for two squares
    360  fd1e							;bcc sr20	 ; Fall along
    361  fd1e
    362  fd1e							; Save all state
    363  fd1e		       a5 82	   sr20       lda	offset	; Offset for movement
    364  fd20		       48		      pha
    365  fd21		       a5 83		      lda	total	; Total directions left
    366  fd23		       48		      pha
    367  fd24		       b9 8c 00 	      lda	board,y	; Content of target square
    368  fd27		       48		      pha
    369  fd28		       98		      tya		; Target square
    370  fd29		       48		      pha
    371  fd2a		       b5 8c		      lda	board,x	; Content of origin square
    372  fd2c		       48		      pha
    373  fd2d		       8a		      txa		; Origin square
    374  fd2e		       85 84		      sta	origin
    375  fd30		       48		      pha
    376  fd31		       b9 8c 00 	      lda	board,y
    377  fd34		       29 07		      and	#7
    378  fd36		       a8		      tay
    379  fd37		       b9 aa ff 	      lda	scores,y	; Score for capture
    380  fd3a		       ba		      tsx
    381  fd3b					      if	mode = atari
    382  fd3b		       e0 e2		      cpx	#255-10*3+1	; Depth limit (2-ply)
    383  fd3d				  -	      else
    384  fd3d				  -	      cpx	#255-10*2+1	; Depth limit (1-ply)
    385  fd3d					      endif
    386  fd3d		       90 22		      bcc	sr22
    387  fd3f		       48		      pha
    388  fd40		       a5 80		      lda	score	; Current score
    389  fd42		       48		      pha
    390  fd43		       a6 84		      ldx	origin
    391  fd45		       a4 85		      ldy	target
    392  fd47		       20 87 fc 	      jsr	sr28	; Do move
    393  fd4a		       a5 81		      lda	side
    394  fd4c		       49 08		      eor	#8	; Change side
    395  fd4e		       85 81		      sta	side
    396  fd50		       20 a3 fc 	      jsr	play
    397  fd53		       a5 81		      lda	side
    398  fd55		       49 08		      eor	#8	; Change side
    399  fd57		       85 81		      sta	side
    400  fd59		       68		      pla
    401  fd5a		       aa		      tax		; Current score in x
    402  fd5b		       68		      pla
    403  fd5c		       38		      sec		; Take capture score and substract adversary score
    404  fd5d		       e5 80		      sbc	score
    405  fd5f		       86 80		      stx	score	; Restore current score
    406  fd61		       c5 80	   sr22       cmp	score	; Better score?
    407  fd63		       18		      clc
    408  fd64		       30 0c		      bmi	sr23	; No, jump
    409  fd66		       d0 07		      bne	sr33	; Better score? yes, jump
    410  fd68		       a5 86		      lda	frame	; Equal score, randomize move
    411  fd6a		       6a		      ror
    412  fd6b		       6a		      ror
    413  fd6c		       4c 72 fd 	      jmp	sr23	; No need to update score but carry = 1 will update move
    414  fd6f							;bcc sr23
    415  fd6f							;bcs sr23
    416  fd6f		       85 80	   sr33       sta	score	; Update score
    417  fd71		       38		      sec
    418  fd72		       68	   sr23       pla		; Restore board
    419  fd73		       aa		      tax
    420  fd74		       68		      pla
    421  fd75		       95 8c		      sta	board,x
    422  fd77		       68		      pla
    423  fd78		       85 85		      sta	target
    424  fd7a		       a8		      tay
    425  fd7b		       68		      pla
    426  fd7c		       99 8c 00 	      sta	board,y
    427  fd7f		       68		      pla
    428  fd80		       85 83		      sta	total
    429  fd82		       68		      pla
    430  fd83		       85 82		      sta	offset
    431  fd85		       90 06		      bcc	sr18
    432  fd87		       68		      pla
    433  fd88		       68		      pla
    434  fd89		       8a		      txa		; Save current best movement
    435  fd8a		       48		      pha
    436  fd8b		       98		      tya
    437  fd8c		       48		      pha
    438  fd8d
    439  fd8d		       b5 8c	   sr18       lda	board,x
    440  fd8f		       29 07		      and	#7
    441  fd91		       c9 01		      cmp	#1	; Was it pawn?
    442  fd93		       f0 0c		      beq	sr16	; Yes, end sequence, choose next movement
    443  fd95		       c9 05		      cmp	#5	; Knight or king?
    444  fd97		       b0 08		      bcs	sr16	; End sequence, choose next movement
    445  fd99		       b9 8c 00 	      lda	board,y	; To empty square?
    446  fd9c		       d0 03		      bne	sr16
    447  fd9e		       4c cd fc 	      jmp	sr9	; Yes, follow line of squares
    448  fda1
    449  fda1		       4c 6d fc    sr16       jmp	sr14
    450  fda4
    451  fda4					      if	mode = atari
    452  fda4							;
    453  fda4							; Set object in X
    454  fda4							; A = X position
    455  fda4							; First arg = Object to position (0=P0, 1=P1, 2=M0, 3=M1, 4=BALL)
    456  fda4							; Exits with carry = 0, it can set V flag for X >= 128
    457  fda4							;
    458  fda4					      MAC	set_x_position
    459  fda4					      sta	WSYNC	; 0- Start line synchro
    460  fda4					      sec		; 2- Set carry flag (avoids it in loop)
    461  fda4				   .AE2       sbc	#15	; 4- Uses required time dividing A by 15
    462  fda4					      bcs	.AE2	; 6/7 - 11/16/21/26/31/36/41/46/51/56/61/66
    463  fda4					      tay		; 8
    464  fda4					      lda	fine_adjustment-$f1,y	; 13 - Eats 5 cycles crossing page
    465  fda4					      sta	HMP0+{1}
    466  fda4					      nop
    467  fda4					      sta	RESP0+{1}	; 21/26/31/36/41/46/51/56/61/66/71 - "big" positioning
    468  fda4					      ENDM
    469  fda4
    470  fda4							;
    471  fda4							; Display kernel
    472  fda4							;
    473  fda4				   kernel
    474  fda4		       a9 00		      lda	#$00
    475  fda6		       85 09		      sta	COLUBK	; Background color
    476  fda8
    477  fda8							; VERTICAL_SYNC
    478  fda8		       a2 02		      ldx	#2
    479  fdaa		       86 00		      stx	VSYNC	; Start vertical synchro
    480  fdac		       86 02		      stx	WSYNC	; Wait for 3 lines
    481  fdae		       86 02		      stx	WSYNC
    482  fdb0		       86 02		      stx	WSYNC
    483  fdb2							;
    484  fdb2		       a2 2b		      ldx	#43
    485  fdb4		       8e 96 02 	      stx	TIM64T
    486  fdb7		       85 00		      sta	VSYNC	; Stop vertical synchro
    487  fdb9		       85 1b		      sta	GRP0
    488  fdbb		       85 1c		      sta	GRP1
    489  fdbd		       a9 70		      lda	#color_black_square
    490  fdbf		       85 09		      sta	COLUBK	; Background color
    491  fdc1		       a9 35		      lda	#$35
    492  fdc3		       85 04		      sta	NUSIZ0	; Size of player/missile 0
    493  fdc5		       85 05		      sta	NUSIZ1	; Size of player/missile 1
    494  fdc7		       a9 74		      lda	#color_white_square
    495  fdc9		       85 08		      sta	COLUPF	; Color of playfield
    496  fdcb		       a5 87		      lda	cursorx	; Get X-position of cursor and set up missile 0
    497  fdcd		       0a		      asl
    498  fdce		       0a		      asl
    499  fdcf		       85 80		      sta	even
    500  fdd1		       0a		      asl
    501  fdd2		       0a		      asl
    502  fdd3		       65 80		      adc	even	; Can set V flag for eighth square (cursorx = 7)
    503  fdd5		       69 0e		      adc	#14
    504  fdd7		       c9 0e		      cmp	#14
    505  fdd9		       d0 02		      bne	*+4
    506  fddb		       e9 03		      sbc	#3
      0  fddd					      set_x_position	2
      1  fddd		       85 02		      sta	WSYNC
      2  fddf		       38		      sec
      3  fde0		       e9 0f	   .AE2       sbc	#15
      4  fde2		       b0 fc		      bcs	.AE2
      5  fde4		       a8		      tay
      6  fde5		       b9 67 fe 	      lda	fine_adjustment-$f1,y
      7  fde8		       85 22		      sta	HMP0+2
      8  fdea		       ea		      nop
      9  fdeb		       85 12		      sta	RESP0+2
    508  fded		       85 02		      sta	WSYNC
    509  fdef		       85 2a		      sta	HMOVE	; Fine adjustment for all set_x_position
    510  fdf1
    511  fdf1				   wait_vblank
    512  fdf1		       ad 84 02 	      lda	INTIM
    513  fdf4		       d0 fb		      bne	wait_vblank
    514  fdf6							;
    515  fdf6							; Start of graphics
    516  fdf6							;
    517  fdf6		       85 02		      sta	WSYNC
    518  fdf8		       85 01		      sta	VBLANK
    519  fdfa		       85 80		      sta	even	; Now uses like row counter, start at zero
    520  fdfc		       a5 86		      lda	frame	; Board position per frame
    521  fdfe		       29 01		      and	#1
    522  fe00		       aa	   ds0	      tax
    523  fe01		       85 02	   ds1	      sta	WSYNC	; Row 0
    524  fe03		       a5 80		      lda	even	; Squares configuration over board
    525  fe05		       4a		      lsr
    526  fe06		       90 0a		      bcc	ds6
    527  fe08		       a9 00		      lda	#$00
    528  fe0a		       85 0d		      sta	PF0
    529  fe0c		       a0 7c		      ldy	#$7c
    530  fe0e		       a9 f8		      lda	#$f8
    531  fe10		       d0 08		      bne	ds7
    532  fe12
    533  fe12		       a9 f0	   ds6	      lda	#$f0
    534  fe14		       85 0d		      sta	PF0
    535  fe16		       a0 83		      ldy	#$83
    536  fe18		       a9 07		      lda	#$07
    537  fe1a		       84 0e	   ds7	      sty	PF1
    538  fe1c		       85 0f		      sta	PF2
    539  fe1e		       b5 8c		      lda	board,x	; Bitmap for piece
    540  fe20		       29 07		      and	#7
    541  fe22		       0a		      asl
    542  fe23		       0a		      asl
    543  fe24		       0a		      asl
    544  fe25		       85 82		      sta	bitmap0
    545  fe27		       85 02		      sta	WSYNC	; Row 1
    546  fe29		       a5 80		      lda	even	; Check if row...
    547  fe2b		       c5 88		      cmp	cursory	; ...equals row of cursor
    548  fe2d		       08		      php		; Save Z flag...
    549  fe2e		       68		      pla		; ...so it goes to bit 1
    550  fe2f		       85 1d		      sta	ENAM0	; Enable missile if at right Y position
    551  fe31		       b5 90		      lda	board+4,x
    552  fe33		       29 07		      and	#7
    553  fe35		       0a		      asl
    554  fe36		       0a		      asl
    555  fe37		       0a		      asl		; //Carry is zero after this instruction
    556  fe38		       85 83		      sta	bitmap1
    557  fe3a		       85 02		      sta	WSYNC
    558  fe3c		       b5 90		      lda	board+4,x	; Bitmap for piece
    559  fe3e		       29 07		      and	#7
    560  fe40		       0a		      asl
    561  fe41		       0a		      asl
    562  fe42		       0a		      asl
    563  fe43		       85 81		      sta	bitmap2
    564  fe45		       85 02		      sta	WSYNC
    565  fe47		       b5 92		      lda	board+6,x	; Bitmap for piece
    566  fe49		       29 07		      and	#7
    567  fe4b		       0a		      asl
    568  fe4c		       0a		      asl
    569  fe4d		       0a		      asl
    570  fe4e		       85 8b		      sta	bitmap3
    571  fe50		       85 02		      sta	WSYNC	; 0
    572  fe52		       a5 86		      lda	frame	; 3
    573  fe54		       a5 86		      lda	frame	; 6
    574  fe56		       a5 86		      lda	frame	; 9
    575  fe58		       a0 03		      ldy	#3	; 12
    576  fe5a		       4a		      lsr		; 14
    577  fe5b		       90 08		      bcc	ds9	; 16
    578  fe5d		       a0 03		      ldy	#3	; 18
    579  fe5f		       88	   ds10       dey		; 20/25/30
    580  fe60		       d0 fd		      bne	ds10
    581  fe62		       4c 65 fe 	      jmp	ds9
    582  fe65
    583  fe65		       85 10	   ds9	      sta	RESP0	; 19
    584  fe67		       ea		      nop		; 22
    585  fe68		       ea		      nop		; 24
    586  fe69		       ea		      nop		; 26
    587  fe6a		       85 11		      sta	RESP1	; 28
    588  fe6c		       a0 04		      ldy	#4	; 31
    589  fe6e		       88	   ds11       dey		; 33/38/43/48
    590  fe6f		       d0 fd		      bne	ds11
    591  fe71		       ea		      nop		; 52
    592  fe72				   ds3
    593  fe72		       b4 8c		      ldy	board,x	; 54 Check color for the two pieces
    594  fe74		       b9 cf ff 	      lda	pieces_color,y	; 58
    595  fe77		       85 06		      sta	COLUP0	; 62
    596  fe79		       b4 90		      ldy	board+4,x	; 65 Check color for the two pieces
    597  fe7b		       b9 cf ff 	      lda	pieces_color,y	; 69
    598  fe7e		       85 07		      sta	COLUP1	; 73
    599  fe80
    600  fe80		       a5 82		      lda	bitmap0	; 76->0
    601  fe82		       a4 82		      ldy	bitmap0	; 3
    602  fe84		       b9 20 ff 	      lda	pieces,y	; 6
    603  fe87		       85 1b		      sta	GRP0	; 10
    604  fe89		       a4 83		      ldy	bitmap1	; 13
    605  fe8b		       b9 20 ff 	      lda	pieces,y	; 16
    606  fe8e		       85 1c		      sta	GRP1	; 20
    607  fe90		       e6 82		      inc	bitmap0	; 23
    608  fe92		       e6 83		      inc	bitmap1	; 28
    609  fe94		       b4 8e		      ldy	board+2,x	; 33 Check color for the two pieces
    610  fe96		       85 10		      sta	RESP0	; 37
    611  fe98		       a5 82		      lda	bitmap0	; 40
    612  fe9a		       a5 82		      lda	bitmap0	; 43
    613  fe9c		       85 11		      sta	RESP1	; 46
    614  fe9e		       b9 cf ff 	      lda	pieces_color,y	; 49
    615  fea1		       85 06		      sta	COLUP0	; 53
    616  fea3		       b4 92		      ldy	board+6,x	; 56 Check color for the two pieces
    617  fea5		       b9 cf ff 	      lda	pieces_color,y	; 60
    618  fea8		       85 07		      sta	COLUP1	; 64
    619  feaa		       a5 82		      lda	bitmap0	; 67
    620  feac		       a5 82		      lda	bitmap0	; 70
    621  feae		       a5 82		      lda	bitmap0	; 73
    622  feb0		       a5 82		      lda	bitmap0	; 76->0       
    623  feb2		       a4 81		      ldy	bitmap2	; 3 
    624  feb4		       b9 20 ff 	      lda	pieces,y	; 6
    625  feb7		       85 1b		      sta	GRP0	; 10
    626  feb9		       a4 8b		      ldy	bitmap3	; 13
    627  febb		       a5 8b		      lda	bitmap3	; 16
    628  febd		       85 10		      sta	RESP0	; 19
    629  febf		       b9 20 ff 	      lda	pieces,y	; 22
    630  fec2		       38		      sec		; 26
    631  fec3		       85 11		      sta	RESP1	; 28
    632  fec5		       85 1c		      sta	GRP1	; 31
    633  fec7		       e6 81		      inc	bitmap2	; 34
    634  fec9		       e6 8b		      inc	bitmap3	; 39
    635  fecb		       a5 82		      lda	bitmap0	; 44
    636  fecd		       29 07		      and	#7	; 47
    637  fecf		       e9 07		      sbc	#7	; 49
    638  fed1		       d0 9f		      bne	ds3	; 51 + 3
    639  fed3		       85 1d		      sta	ENAM0	; Disable cursor
    640  fed5		       85 02		      sta	WSYNC
    641  fed7		       85 02		      sta	WSYNC
    642  fed9		       85 02		      sta	WSYNC
    643  fedb		       85 02		      sta	WSYNC
    644  fedd		       e6 80		      inc	even	; Increase current row
    645  fedf		       8a		      txa
    646  fee0		       18		      clc		; Carry is still zero//
    647  fee1		       69 0a		      adc	#10	; Next row of board
    648  fee3		       c9 50		      cmp	#80
    649  fee5		       b0 03		      bcs	ds8
    650  fee7		       4c 00 fe 	      jmp	ds0
    651  feea				   ds8
    652  feea
    653  feea							;
    654  feea							; End of graphics (204 lines)
    655  feea							;
    656  feea		       a9 02		      lda	#2
    657  feec		       85 02		      sta	WSYNC
    658  feee		       85 01		      sta	VBLANK
    659  fef0
    660  fef0							;
    661  fef0							; Start overscan timer
    662  fef0							;
    663  fef0		       a9 2b		      lda	#43	; 37 lines * 76 = 2812 cycles / 64 = 43.9375
    664  fef2		       8d 96 02 	      sta	TIM64T
    665  fef5				   wait_overscan
    666  fef5		       ad 84 02 	      lda	INTIM
    667  fef8		       d0 fb		      bne	wait_overscan
    668  fefa		       85 02		      sta	WSYNC
    669  fefc		       85 0d		      sta	PF0
    670  fefe		       85 0e		      sta	PF1
    671  ff00		       85 0f		      sta	PF2
    672  ff02		       85 02		      sta	WSYNC
    673  ff04		       85 81		      sta	side	; Black side plays
    674  ff06
    675  ff06		       e6 86		      inc	frame
    676  ff08
    677  ff08		       60		      rts
    678  ff09
 Free bytes section 1:  $17
    679  ff09					      echo	"Free bytes section 1: ",$ff20-*
    680  ff09
    681  ff20					      org	$ff20
    682  ff20				   pieces
    683  ff20		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00
    684  ff28		       00 18 3c 3c*	      .byte.b	$00,$18,$3c,$3c,$18,$3c,$00,$00
    685  ff30		       5a 7e 3c 3c*	      .byte.b	$5a,$7e,$3c,$3c,$7e,$7e,$00,$00
    686  ff38		       18 3c 3c 3c*	      .byte.b	$18,$3c,$3c,$3c,$18,$66,$00,$00
    687  ff40		       5a 5a 24 3c*	      .byte.b	$5a,$5a,$24,$3c,$3c,$3c,$00,$00
    688  ff48		       70 58 7c 6e*	      .byte.b	$70,$58,$7c,$6e,$1e,$3e,$00,$00
    689  ff50		       3c 6a 56 3c*	      .byte.b	$3c,$6a,$56,$3c,$3c,$3c,$00,$00
    690  ff58
    691  ff58				   fine_adjustment
    692  ff58		       70		      .byte.b	$70	; -7 
    693  ff59		       60		      .byte.b	$60	; -6 
    694  ff5a		       50		      .byte.b	$50	; -5
    695  ff5b		       40		      .byte.b	$40	; -4
    696  ff5c		       30		      .byte.b	$30	; -3
    697  ff5d		       20		      .byte.b	$20	; -2
    698  ff5e		       10		      .byte.b	$10	; -1
    699  ff5f		       00		      .byte.b	$00	; 0
    700  ff60		       f0		      .byte.b	$f0	; +1
    701  ff61		       e0		      .byte.b	$e0	; +2
    702  ff62		       d0		      .byte.b	$d0	; +3
    703  ff63		       c0		      .byte.b	$c0	; +4
    704  ff64		       b0		      .byte.b	$b0	; +5
    705  ff65		       a0		      .byte.b	$a0	; +6
    706  ff66		       90		      .byte.b	$90	; +7
    707  ff67
    708  ff67							;
    709  ff67							; Read a coordinate choosen by cursor
    710  ff67							; Moves y to x, y contains new coordinate.
    711  ff67							;
    712  ff67				   read_coor
    713  ff67		       98		      tya
    714  ff68		       48		      pha
    715  ff69		       20 7a ff 	      jsr	read_coor2
    716  ff6c		       a8		      tay
    717  ff6d		       68		      pla
    718  ff6e		       aa		      tax
    719  ff6f		       60		      rts
    720  ff70
    721  ff70		       a0 00	   rc5	      ldy	#0
    722  ff72				  -	      if	0
    723  ff72				  -	      lda	SWCHA	; Read current state of joystick
    724  ff72				  -	      sta	even
    725  ff72				  -	      tax
    726  ff72				  -	      eor	pSWCHA
    727  ff72				  -	      stx	pSWCHA
    728  ff72				  -	      eor	#$ff
    729  ff72				  -	      ora	even	; Disable unchanged directions
    730  ff72				  -	      bmi	rc0	; Jump if not going right
    731  ff72				  -	      ldx	cursorx
    732  ff72				  -	      cpx	#7
    733  ff72				  -	      beq	rc0
    734  ff72				  -	      inc	cursorx
    735  ff72				  -	      ldy	#8
    736  ff72				  -
    737  ff72				  -rc0	      rol		; Jump if not going left
    738  ff72				  -	      bmi	rc1
    739  ff72				  -	      ldx	cursorx
    740  ff72				  -	      beq	rc1
    741  ff72				  -	      dec	cursorx
    742  ff72				  -	      ldy	#8
    743  ff72				  -
    744  ff72				  -rc1	      rol		; Jump if not going down
    745  ff72				  -	      bmi	rc2
    746  ff72				  -	      ldx	cursory
    747  ff72				  -	      cpx	#7
    748  ff72				  -	      beq	rc2
    749  ff72				  -	      inc	cursory
    750  ff72				  -	      ldy	#8
    751  ff72				  -
    752  ff72				  -rc2	      rol		; Jump if not going up
    753  ff72				  -	      bmi	rc3
    754  ff72				  -	      ldx	cursory
    755  ff72				  -	      beq	rc3
    756  ff72				  -	      dec	cursory
    757  ff72				  -	      ldy	#8
    758  ff72				  -rc3
    759  ff72					      endif
    760  ff72		       a2 01		      ldx	#$01
    761  ff74		       86 15		      stx	AUDC0
    762  ff76		       84 19		      sty	AUDV0
    763  ff78		       84 17		      sty	AUDF0
    764  ff7a							;	 jmp read_coor2     ; Fall thru
    765  ff7a							;
    766  ff7a							; Read a coordinate in a
    767  ff7a							;
    768  ff7a				   read_coor2
    769  ff7a		       20 a4 fd 	      jsr	kernel
    770  ff7d							;lda #0	    ; Kernel returns with a = 0
    771  ff7d		       85 19		      sta	AUDV0
    772  ff7f		       a5 0c		      lda	INPT4	; Read current state of button
    773  ff81		       85 80		      sta	even
    774  ff83		       aa		      tax
    775  ff84		       45 8a		      eor	pINPT4
    776  ff86		       86 8a		      stx	pINPT4
    777  ff88		       49 ff		      eor	#$ff
    778  ff8a		       05 80		      ora	even	; Disable unchanged button
    779  ff8c		       30 e2		      bmi	rc5	; Jump if button not pressed
    780  ff8e							;
    781  ff8e							; Computer plays
    782  ff8e							;
    783  ff8e		       a2 03		      ldx	#$03
    784  ff90		       86 15		      stx	AUDC0
    785  ff92		       a2 08		      ldx	#$08
    786  ff94		       86 19		      stx	AUDV0
    787  ff96		       86 17		      stx	AUDF0
    788  ff98		       a5 88		      lda	cursory	; y_coor 
    789  ff9a		       0a		      asl		; *2
    790  ff9b		       0a		      asl		; *4
    791  ff9c		       65 88		      adc	cursory	; *5
    792  ff9e		       0a		      asl		; *10
    793  ff9f		       65 87		      adc	cursorx	; + x_coor
    794  ffa1		       60		      rts
    795  ffa2
    796  ffa2				  -	      else
    797  ffa2				  -kernel
    798  ffa2				  -	      jsr	headers
    799  ffa2				  -	      lda	#$38
    800  ffa2				  -	      sta	bitmap0
    801  ffa2				  -	      ldx	#0
    802  ffa2				  -kn0	      lda	bitmap0
    803  ffa2				  -	      sta	$0f
    804  ffa2				  -	      lda	#$20
    805  ffa2				  -	      sta	$0f
    806  ffa2				  -	      ldy	#8
    807  ffa2				  -kn1	      txa
    808  ffa2				  -	      pha
    809  ffa2				  -	      lda	board,x
    810  ffa2				  -	      tax
    811  ffa2				  -	      lda	letters,x
    812  ffa2				  -	      sta	$0f
    813  ffa2				  -	      lda	#$20
    814  ffa2				  -	      sta	$0f
    815  ffa2				  -	      pla
    816  ffa2				  -	      tax
    817  ffa2				  -	      inx
    818  ffa2				  -	      dey
    819  ffa2				  -	      bne	kn1
    820  ffa2				  -	      lda	bitmap0
    821  ffa2				  -	      sta	$0f
    822  ffa2				  -	      lda	#$0a
    823  ffa2				  -	      sta	$0f
    824  ffa2				  -	      dec	bitmap0
    825  ffa2				  -	      inx
    826  ffa2				  -	      inx
    827  ffa2				  -	      cpx	#80
    828  ffa2				  -	      bne	kn0
    829  ffa2				  -	      jsr	headers
    830  ffa2				  -	      rts
    831  ffa2				  -
    832  ffa2				  -headers
    833  ffa2				  -	      ldx	#0
    834  ffa2				  -kn2	      lda	header,x
    835  ffa2				  -	      sta	$0f
    836  ffa2				  -	      lda	#$20
    837  ffa2				  -	      sta	$0f
    838  ffa2				  -	      inx
    839  ffa2				  -	      cpx	#9
    840  ffa2				  -	      bne	kn2
    841  ffa2				  -	      lda	#$0a
    842  ffa2				  -	      sta	$0f
    843  ffa2				  -	      rts
    844  ffa2				  -
    845  ffa2				  -header
    846  ffa2				  -	      .byte	$20,$41,$42,$43,$44,$45,$46,$47
    847  ffa2				  -	      .byte	$48
    848  ffa2				  -
    849  ffa2				  -letters
    850  ffa2				  -	      .byte	$2e,$70,$72,$62,$71,$6e,$6b,$00
    851  ffa2				  -	      .byte	$00,$50,$52,$42,$51,$4e,$4b
    852  ffa2				  -
    853  ffa2				  -			;
    854  ffa2				  -			; Read a coordinate choosen by cursor
    855  ffa2				  -			; Moves y to x, y contains new coordinate.
    856  ffa2				  -			;
    857  ffa2				  -read_coor
    858  ffa2				  -	      tya
    859  ffa2				  -	      tax
    860  ffa2				  -	      jsr	readkey
    861  ffa2				  -	      sta	even
    862  ffa2				  -	      jsr	readkey
    863  ffa2				  -	      eor	#$ff	; 1-8 converted to $fe-$f7
    864  ffa2				  -	      clc
    865  ffa2				  -	      adc	#$09	; row
    866  ffa2				  -	      asl		; x2
    867  ffa2				  -	      sta	bitmap0
    868  ffa2				  -	      asl		; x4
    869  ffa2				  -	      asl		; x8
    870  ffa2				  -	      adc	bitmap0	; x10
    871  ffa2				  -	      adc	even	; +column
    872  ffa2				  -	      tay
    873  ffa2				  -	      dey
    874  ffa2				  -	      rts
    875  ffa2				  -
    876  ffa2				  -readkey
    877  ffa2				  -	      lda	$d011
    878  ffa2				  -	      beq	readkey
    879  ffa2				  -	      lda	$d010
    880  ffa2				  -	      and	#$0f
    881  ffa2				  -	      rts
    882  ffa2				  -
    883  ffa2					      endif
    884  ffa2
    885  ffa2				   initial
    886  ffa2		       02 05 03 04*	      .byte.b	$02,$05,$03,$04,$06,$03,$05,$02
    887  ffaa
    888  ffaa				   scores
    889  ffaa		       00 01 05 03*	      .byte.b	0,1,5,3,9,3
    890  ffb0
    891  ffb0				   offsets
    892  ffb0		       10 14 08 0c*	      .byte.b	16,20,8,12,8,0,8
    893  ffb7
    894  ffb7				   displacement
    895  ffb7		       eb ed f4 f8*	      .byte.b	-21,-19,-12,-8,8,12,19,21
    896  ffbf		       f6 0a ff 01	      .byte.b	-10,10,-1,1
    897  ffc3		       09 0b f7 f5	      .byte.b	9,11,-9,-11
    898  ffc7		       f5 f7 f6 ec	      .byte.b	-11,-9,-10,-20
    899  ffcb		       09 0b 0a 14	      .byte.b	9,11,10,20
    900  ffcf
    901  ffcf					      if	mode = atari
    902  ffcf
    903  ffcf				   pieces_color
    904  ffcf		       28 28 28 28	      .byte.b	color_black, color_black, color_black, color_black
    905  ffd3		       28 28 28 28	      .byte.b	color_black, color_black, color_black, color_black
    906  ffd7		       0e 0e 0e 0e	      .byte.b	color_white, color_white, color_white, color_white
    907  ffdb		       0e 0e 0e 	      .byte.b	color_white, color_white, color_white
    908  ffde
 Free bytes section 2:  $1e
    909  ffde					      echo	"Free bytes section 2: ",$fffc-*
    910  ffde
    911  fffc					      org	$fffc
    912  fffc		       00 fc		      .word.w	START	; RESET
    913  fffe		       00 fc		      .word.w	START	; BRK
    914  10000					       endif
